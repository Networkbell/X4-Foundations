<?xml version="1.0" encoding="utf-8" ?>
<!--
    NOTE: This script is NOT my original work.
    Original mod on Nexus: https://www.nexusmods.com/x4foundations/mods/545
    Original author: Assailer
    Adaptations and compatibility fixes for X4 v8.0 by: Damonya
    I (Damonya) only corrected and published this version on my GitHub.
-->
<aiscript name="sectorexplorer" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="5">
	<order id="SectorExplorer" name="{314154, 12}" description="{314154, 12}" category="navigation" infinite="true">
		<params>
			<param name="fs_usecore" default="true" type="bool" text="{314154, 5}"/>
			<param name="fs_skiphexagon" default="false" type="bool" text="{314154, 6}"/>
			<param name="fs_lockbox" default="false" type="bool" text="{314154, 7}"/>
			<param name="fs_abandoned" default="false" type="bool" text="{314154, 15}"/>
			<param name="fs_vaults" default="false" type="bool" text="{314154, 16}"/>
			<param name="fs_continue" default="true" type="bool" text="{314154, 8}"/>
			<param name="fs_stations" default="false" type="bool" text="{314154, 17}"/>
			<param name="fs_radius" type="length" default="300km" text="{314154, 11}">
				<input_param name="min" value="200km"/>
				<input_param name="max" value="2000km"/>
				<input_param name="step" value="50km"/>
			</param>
			<param name="fs_delta" type="length" default="40km" text="{314154, 14}">
				<input_param name="min" value="40km"/>
				<input_param name="max" value="100km"/>
				<input_param name="step" value="10km"/>
			</param>
			<param name="fs_satscan" default="false" type="bool" text="{314154, 13}"/>
			<param name="fs_reset" default="false" type="bool" text="{314154, 18}"/>
			<param name="fs_notify" default="true" type="bool" text="{314154, 19}"/>
		</params>
		<requires>
			<match shiptype="shiptype.lasertower" negate="true"/>
		</requires>
	</order>

	<interrupts>
		<handler ref="AttackHandler" />
		<handler ref="MissileLockHandler" />
		<handler ref="ScannedHandler" />
		<handler ref="InspectedHandler"/>
		<handler ref="TargetInvalidHandler"/>
		<handler ref="FoundAbandonedHandler"/>
		<handler ref="FoundLockboxHandler"/>
	</interrupts>
	<init>
		<set_value name="$ship" exact="this.assignedcontrolled"/>
		<set_value name="$sector" exact="$ship.sector"/>
		<set_order_syncpoint_reached order="$ship.order"/>
		<set_command_action commandaction="commandaction.standingby"/>

		<do_if value="not global.$fs_explored_sectors?">
			<set_value name="global.$fs_explored_sectors" exact="table[]"/>
		</do_if>

		<do_if value="$ship.pilot.fs_exp_stage?">
			<set_value name="$pilot_fs_stage" exact="$ship.pilot.fs_exp_stage"/>
		</do_if>
		<do_else>
			<set_value name="$pilot_fs_stage" exact="0"/>
		</do_else>

		<do_if value="$ship.pilot.fs_exp_range?">
			<set_value name="$pilot_fs_range" exact="$ship.pilot.fs_exp_range"/>
		</do_if>
		<do_else>
			<set_value name="$pilot_fs_range" exact="0km"/>
		</do_else>

		<do_if value="$ship.pilot.fs_exp_probe?">
			<set_value name="$pilot_fs_probe" exact="$ship.pilot.fs_exp_probe"/>
		</do_if>
		<do_else>
			<set_value name="$pilot_fs_probe" exact="null"/>
		</do_else>

		<do_if value="$fs_reset and global.$fs_explored_sectors.{$sector}?">
			<set_value name="global.$fs_explored_sectors.{$sector}" exact="table[{1} = 0km, {2} = 0s]"/>
		</do_if>
	</init>

	<attention min="unknown">
		<actions>
			<!-- START ******************************************************************************* -->
			<label name="start"/>

			<set_command command="command.patrol"/>
			<set_command_action commandaction="commandaction.flying"/>

			<do_if value="$fs_continue">

				<!--set_value name="$message" exact="'%1 is scanning:'.[$ship.name]"/-->

				<set_value name="$fs_range" exact="0"/>
				<do_while value="$fs_range lt 30">
					<find_sector_in_range name="$fs_targets" object="$ship" mindistance="$fs_range" maxdistance="$fs_range" multiple="true"/>
					
					<do_if value="$fs_targets.count == 0">
						<resume label="explorer_objects"/>
					</do_if>
					
					<do_if value="$fs_targets.count">
						<shuffle_list list="$fs_targets"/>

						<do_all exact="$fs_targets.count" counter="$ti">
							<set_value name="$fs_target" exact="$fs_targets.{$ti}"/>

							<do_if value="not global.$fs_explored_sectors?">
								<set_value name="global.$fs_explored_sectors" exact="table[]"/>
							</do_if>

							<do_if value="not global.$fs_explored_sectors.{$fs_target}?">
								<set_value name="global.$fs_explored_sectors.{$fs_target}" exact="table[{1} = 0km, {2} = 0s]"/>
							</do_if>

							<wait min="0.1s" max="0.2s"/>

							<do_if value="@global.$fs_explored_sectors.{$fs_target}.{2} lt player.age">
								<do_if value="not $fs_target.isblacklisted.{blacklisttype.sectoractivity}.{blacklistgroup.civilian}.{$ship}">
									<set_value name="$allow" exact="false"/>

									<set_value name="$fs_objects" exact="[]"/>

									<find_object name="$fs_objects" space="$fs_target" class="[class.gate]" known="false" multiple="true">
										<match_relation_to object="$ship" relation="neutral" comparison="ge"/>
									</find_object>

									<do_if value="$fs_stations? and $fs_stations">
										<find_object name="$fs_objects" space="$fs_target" class="[class.station]" known="false" multiple="true" append="true">
											<match_relation_to object="$ship" relation="neutral" comparison="ge"/>
										</find_object>
									</do_if>

									<!--set_value name="$message" exact="$message + '\n%1 objects:%2'.[$fs_target.knownname, $fs_objects.count]"/-->

									<do_if value="$fs_objects.count">
										<set_value name="$allow" exact="true"/>
									</do_if>

									<do_if value="not $fs_skiphexagon">
										<do_if value="global.$fs_explored_sectors.{$fs_target}.{1} lt $fs_radius">
											<set_value name="$allow" exact="true"/>
										</do_if>

										<!--set_value name="$message" exact="$message + ' fog:%1 range:%2'.[global.$fs_explored_sectors.{$fs_target}.{1}, $fs_radius]"/-->
									</do_if>

									<do_if value="$allow">
										<set_value name="global.$fs_explored_sectors.{$fs_target}.{2}" exact="player.age + 600s"/>

										<resume label="explorer_travelling"/>
									</do_if>
								</do_if>
							</do_if>
						</do_all>

						<wait min="1s" max="2s"/>
					</do_if>

					<wait min="3s" max="5s"/>
					<set_value name="$fs_range" exact="$fs_range + 1"/>
				</do_while>

				<wait min="5s" max="8s"/>
				<resume label="start"/>
			</do_if>
			<do_else>
				<write_to_logbook category="general" title="{314154, 1}" text="{314154, 2}.[$ship.name, $sector.knownname]" />

				<wait min="3s" max="5s"/>
				<resume label="explorer_objects"/>
			</do_else>

			<!-- EXPLORER TRAVELLING ******************************************************************** -->
			<label name="explorer_travelling"/>

			<set_command_action commandaction="commandaction.flyingto" param="$fs_target"/>

			<get_safe_pos result="$finalpos" sector="$fs_target" object="$fs_target" min="$fs_target.size / 5.0" max="$fs_target.size / 2.0" radius="$ship.size / 2.0" ignored="$ship" allowyaxis="true"/>

			<move_to object="$ship" destination="$fs_target" abortpath="true" travel="true" forceposition="false" finishonapproach="true" commandaction="false" useblacklist="blacklistgroup.civilian">
				<position value="$finalpos"/>
				<interrupt_after_time time="600s"/>
			</move_to>

			<stop_moving object="$ship"/>

			<write_to_logbook category="general" title="{314154, 1}" text="{314154, 2}.[ $ship.name, $sector.knownname]" />

			<wait min="1s" max="2s"/>
			<resume label="explorer_objects"/>

			<!-- EXPLORER OBJECTS (7) ******************************************************************** -->
			<label name="explorer_objects"/>

			<find_object name="$fs_targets" space="$sector" class="[class.gate, class.highwayexitgate, class.highwayentrygate]" known="false" multiple="true">
				<match_relation_to object="$ship" relation="neutral" comparison="ge"/>
				<match value="not $fs_targets.contains.{$ship.lasttarget}"/>
			</find_object>

			<do_all exact="$fs_targets.count" reverse="true" counter="$ti">
				<do_if value="@$fs_targets.{$ti}.highway.islocalhighway">
					<remove_value name="$fs_targets.{$ti}"/>
				</do_if>
			</do_all>

			<do_if value="@$fs_stations">
				<find_object name="$fs_targets" space="$sector" class="class.station" known="false" multiple="true" append="true">
					<match_relation_to object="$ship" relation="neutral" comparison="ge"/>
				</find_object>
			</do_if>

			<do_if value="@$fs_lockbox">
				<find_object name="$fs_targets" space="$sector" class="class.lockbox" known="false" multiple="true" append="true"/>
			</do_if>

			<do_if value="@$fs_abandoned">
				<find_object name="$fs_targets" space="$sector" class="class.ship" known="false" docked="false" capturable="true" owner="faction.ownerless" multiple="true" append="true"/>
			</do_if>

			<do_if value="@$fs_vaults">
				<find_object name="$fs_targets" space="$sector" macro="[macro.landmarks_erlking_vault_01_macro, macro.landmarks_erlking_vault_02_macro, macro.landmarks_erlking_vault_03_macro, macro.landmarks_erlking_vault_04_macro, macro.landmarks_erlking_vault_05_macro, macro.landmarks_research_vault_01_macro, macro.landmarks_vault_01_macro, macro.landmarks_vault_02_macro, macro.landmarks_vault_03_macro, macro.landmarks_vault_04_macro]" multiple="true" known="false" append="true"/>
			</do_if>

			<set_value name="$fs_closest" exact="-1"/>
			<do_all exact="$fs_targets.count" counter="$ti">
				<set_value name="$fs_distance" exact="$fs_targets.{$ti}.distanceto.{$ship}"/>
				<do_if value="$fs_closest lt 0 or $fs_distance lt $fs_closest">
					<set_value name="$fs_closest" exact="$fs_distance"/>
					<set_value name="$fs_target" exact="$fs_targets.{$ti}"/>
				</do_if>
			</do_all>

			<do_if value="$fs_closest gt 0">
				<set_command_action commandaction="commandaction.flyingto" param="$fs_target"/>
				<get_safe_pos result="$finalpos" object="$fs_target" zone="$fs_target.zone" radius="$ship.size/2.0" ignored="$ship"/>
				<move_to object="$ship" destination="$fs_target.zone" abortpath="true" forcerotation="true" forceposition="true" uselocalhighways="false" boost="false" travel="true">
					<position value="$finalpos"/>
					<interrupt_after_time time="600s"/>
				</move_to>

				<stop_moving object="$ship"/>
				<resume label="explorer_objects"/>
			</do_if>

			<do_if value="$fs_skiphexagon">
				<resume label="start"/>
			</do_if>

			<!-- setup the hexagonal explorer based on explored progress saved from earlier times -->

			<set_value name="$pilot_fs_stage" exact="0"/>
			<set_value name="$fs_range" exact="$fs_delta"/>

			<!-- creation -->
			<do_if value="not global.$fs_explored_sectors.{$sector}?">
				<set_value name="global.$fs_explored_sectors.{$sector}" exact="table[{1} = 0km, {2} = 0s]"/>
			</do_if>

			<set_value name="$fs_progress" exact="global.$fs_explored_sectors.{$sector}.{1}"/>

			<do_while value="$fs_progress gt ($fs_range + $fs_delta)">
				<set_value name="$fs_range" exact="$fs_range + $fs_delta"/>
			</do_while>

			<set_value name="$pilot_fs_range" exact="$fs_range"/>
			<set_value name="$ship.pilot.fs_exp_range" exact="$pilot_fs_range"/>

			<wait min="1s" max="2s"/>
			<resume label="explorer_loop"/>

			<!-- EXPLORER LOOP (0 - 7) ****************************************************************** -->
			<label name="explorer_loop"/>

			<set_value name="$fs_stage" exact="$pilot_fs_stage"/>
			<set_value name="$fs_range" exact="$pilot_fs_range"/>

			<do_if value="not $fs_satscan?">
				<set_value name="$fs_satscan" exact="false"/>
			</do_if>

			<do_if value="$fs_usecore">
				<set_value name="$fs_anchor" exact="$sector.coreposition"/>
			</do_if>
			<do_else>
				<set_value name="$fs_anchor" exact="position.[0,0,0]"/>
			</do_else>

			<do_if value="$fs_satscan">
				<do_if value="$fs_stage == 0">
					<set_command_action commandaction="commandaction.flying"/>
					<create_position name="$finalpos" x="$fs_anchor.x" y="$fs_anchor.y + 140km" z="$fs_anchor.z" space="$sector"/>

					<create_orientation name="$orientation" orientation="look_at" refposition="$finalpos">
						<position object="$ship"/>
					</create_orientation>

					<move_to object="$ship" destination="$sector" abortpath="true" forcerotation="true" forceposition="true" uselocalhighways="false" boost="false" travel="true">
						<position value="$finalpos" />
						<rotation value="$orientation" />
						<interrupt_after_time time="600s"/>
					</move_to>

					<stop_moving object="$ship"/>
				</do_if>
				<do_elseif value="$fs_stage == 1">
					<set_command_action commandaction="commandaction.calculating"/>

					<set_value name="$fs_angle" exact="0deg"/>

					<do_while value="$fs_angle lt 360deg">

						<create_position name="$finalpos" x="$fs_anchor.x + sin($fs_angle) * $fs_range" y="$fs_anchor.y + 40km" z="$fs_anchor.z + cos($fs_angle) * $fs_range" space="$sector"/>

						<do_if value="(not $pilot_fs_probe?) or (not $pilot_fs_probe.isclass.satellite)">
						
						<create_object name="$pilot_fs_probe" macro="macro.eq_arg_satellite_02_macro" owner="faction.player" sector="$sector">
							<position x="$finalpos.x" y="$finalpos.y" z="$finalpos.z"/>
						</create_object>
						<do_if value="$pilot_fs_probe?">
							<set_value name="$ship.pilot.fs_exp_probe" exact="$pilot_fs_probe"/>
						</do_if>

						
						<do_if value="not $pilot_fs_probe?">
							<debug_text text="'fs_exp: macro eq_arg_satellite_02_macro failed — trying launch_satellite fallback'" filter="error"/>
							<do_if value="$ship.ammostorage.{deployablecategory.satellite}.count gt 0">
                                <launch_satellite object="$ship" macro="macro.eq_arg_satellite_02_macro"/>
                                <wait min="0.5s" max="1s"/>
                                <find_object name="$recent_satellites" space="$sector" class="[class.satellite]" trueowner="faction.player" multiple="true">
                                    <match_distance object="$ship" max="1km"/>
                                </find_object>
                                <do_if value="$recent_satellites.count">
                                    <set_value name="$pilot_fs_probe" exact="$recent_satellites.{1}"/>
                                    <set_value name="$ship.pilot.fs_exp_probe" exact="$pilot_fs_probe"/>
                                </do_if>
                                <remove_value name="$recent_satellites"/>
                            </do_if>
						</do_if>

						
						<do_if value="not $pilot_fs_probe?">
							<debug_text text="'fs_exp: launch_satellite fallback failed — trying backup macro eq_arg_satellite_01_macro'" filter="error"/>
							<create_object name="$pilot_fs_probe" macro="macro.eq_arg_satellite_01_macro" owner="faction.player" sector="$sector">
								<position x="$finalpos.x" y="$finalpos.y" z="$finalpos.z"/>
							</create_object>
							<do_if value="$pilot_fs_probe?">
								<set_value name="$ship.pilot.fs_exp_probe" exact="$pilot_fs_probe"/>
							</do_if>
						</do_if>
						</do_if>

						<warp object="$pilot_fs_probe" sector="$sector">
							<position value="$finalpos"/>
						</warp>

						<wait min="1s" max="1.1s"/>

						<set_value name="$fs_angle" exact="$fs_angle + 2deg"/>
					</do_while>

					<set_value name="$pilot_fs_stage" exact="6"/>
					<set_value name="$ship.pilot.fs_exp_stage" exact="$pilot_fs_stage"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 2">
					<set_value name="$pilot_fs_stage" exact="0"/>
					<set_value name="$ship.pilot.fs_exp_stage" exact="$pilot_fs_stage"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 3">
					<set_value name="$pilot_fs_stage" exact="0"/>
					<set_value name="$ship.pilot.fs_exp_stage" exact="$pilot_fs_stage"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 4">
					<set_value name="$pilot_fs_stage" exact="0"/>
					<set_value name="$ship.pilot.fs_exp_stage" exact="$pilot_fs_stage"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 5">
					<set_value name="$pilot_fs_stage" exact="0"/>
					<set_value name="$ship.pilot.fs_exp_stage" exact="$pilot_fs_stage"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 6">
					<set_value name="$pilot_fs_stage" exact="0"/>
					<set_value name="$ship.pilot.fs_exp_stage" exact="$pilot_fs_stage"/>
				</do_elseif>
				<do_elseif value="$fs_stage ge 7">
					<resume label="start"/>
				</do_elseif>
			</do_if>
			<do_else>
				<do_if value="$fs_stage == 0">
					<set_value name="$fs_angle" exact="30deg"/>
				</do_if>
				<do_elseif value="$fs_stage == 1">
					<set_value name="$fs_angle" exact="90deg"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 2">
					<set_value name="$fs_angle" exact="150deg"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 3">
					<set_value name="$fs_angle" exact="210deg"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 4">
					<set_value name="$fs_angle" exact="270deg"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 5">
					<set_value name="$fs_angle" exact="330deg"/>
				</do_elseif>
				<do_elseif value="$fs_stage == 6">
					<set_value name="$fs_angle" exact="30deg"/>
				</do_elseif>
				<do_elseif value="$fs_stage ge 7">
					<resume label="start"/>
				</do_elseif>

				<create_position name="$finalpos" x="$fs_anchor.x + sin($fs_angle) * $fs_range" y="$fs_anchor.y + 40km" z="$fs_anchor.z + cos($fs_angle) * $fs_range" space="$sector"/>

				<create_orientation name="$orientation" orientation="look_at" refposition="$finalpos">
					<position object="$ship"/>
				</create_orientation>

				<set_command_action commandaction="commandaction.flying"/>

				<move_to object="$ship" destination="$sector" abortpath="true" forcerotation="true" forceposition="true" uselocalhighways="false" boost="false" travel="true">
					<position value="$finalpos" />
					<rotation value="$orientation" />
					<interrupt_after_time time="600s"/>
				</move_to>

				<stop_moving object="$ship"/>
			</do_else>

			<set_command_action commandaction="commandaction.calculating"/>

			<wait min="1s" max="3s"/>

			<set_value name="$fs_stage" exact="$fs_stage + 1"/>

			<do_if value="$fs_stage == 7">
				<set_value name="$fs_stage" exact="0"/>

				<set_value name="$fs_range" exact="$fs_range + $fs_delta"/>
				<set_value name="$pilot_fs_range" exact="$fs_range"/>
				<set_value name="$ship.pilot.fs_exp_range" exact="$pilot_fs_range"/>

				<do_if value="global.$fs_explored_sectors.{$sector}.{1} lt $fs_range">
					<set_value name="global.$fs_explored_sectors.{$sector}" exact="table[{1} = $fs_range, {2} = player.age + 600s]"/>
				</do_if>

				<do_if value="$fs_range gt 150km">
					<apply_experience entity="$ship.pilot" experience="'fs_exp'" factor="1.0"/>
				</do_if>

				<do_if value="$fs_range gt $fs_radius">
					<set_command_action commandaction="commandaction.standingby"/>

					<do_if value="@$fs_notify">
						<show_help custom="{314154, 4}.[ $ship.name, $sector.knownname ]"/>
					</do_if>

					<write_to_logbook category="general" title="{314154, 1}" text="{314154, 3}.[ $ship.name, $sector.knownname ]" />

					<do_if value="$pilot_fs_probe?">
						<!--debug_to_file directory="'fs_exp'" name="'debug'" text="'%s: %s delete %s'.[player.age, $ship.knownname, $pilot_fs_probe]" output="false" append="true"/-->
						<destroy_object object="$pilot_fs_probe" explosion="false" />
						<remove_value name="$ship.pilot.fs_exp_probe"/>
						<set_value name="$pilot_fs_probe" exact="null"/>
					</do_if>

					<wait min="1s" max="2s"/>
					<resume label="start"/>
				</do_if>
			</do_if>

			<set_value name="$pilot_fs_stage" exact="$fs_stage"/>
			<set_value name="$ship.pilot.fs_exp_stage" exact="$pilot_fs_stage"/>
			<resume label="explorer_loop"/>

		</actions>
	</attention>
	<on_abort>
		<do_if value="$pilot_fs_probe?">
			<!--debug_to_file directory="'fs_exp'" name="'debug'" text="'%s: %s cleanup %s'.[player.age, $ship.knownname, $pilot_fs_probe]" output="false" append="true"/-->
			<destroy_object object="$pilot_fs_probe" explosion="false" />
			<remove_value name="$ship.pilot.fs_exp_probe"/>
			<set_value name="$pilot_fs_probe" exact="null"/>
		</do_if>
	</on_abort>
</aiscript>
